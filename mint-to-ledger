#!/usr/bin/env python

# Adapted from https://github.com/shiinee/mint-to-ledger
# Reads a transactions .csv file exported from Mint.com and writes it out as a ledger .dat
# file.

from __future__ import print_function
import argparse
import csv
from datetime import datetime
import re
from textwrap import dedent

expected_headers = ['Date', 'Description', 'Original Description', 'Amount', 
    'Transaction Type', 'Category', 'Account Name', 'Labels', 'Notes']
    
parser = argparse.ArgumentParser()
parser.add_argument("cat_file", help="file describing hierarchy of Mint categories")
parser.add_argument("csv_file", help="exported transactions file from Mint")
parser.add_argument("ledger_file", help="file to write ledger transaction list to")
args = parser.parse_args()

# Create dictionary from category to account name
cat_dict = {}
last_cat = []
with open(args.cat_file, 'r') as lines:
    for line in lines:
        # Count preceding tabs
        num_spaces = 0
        i = 0
        while i < len(line) and line[i] == ' ':
            num_spaces += 1
            i += 1
        
        TAB_SIZE = 2 # Number of spaces in a tab
        num_tabs = num_spaces // 2
        
        line = line.strip()
        
        if num_tabs < len(last_cat):
            last_cat[num_tabs] = line
        else:
            last_cat.append(line)
            assert num_tabs < len(last_cat), 'More tabs than category levels'
        
        cat_dict[line] = ':'.join(last_cat[:num_tabs+1])

with open(args.csv_file) as mint_file:
    mint_reader = csv.reader(mint_file)
    transactions = [row for row in mint_reader]
    
headers, transactions = transactions[0], transactions[1:]

if headers != expected_headers:
    print("ERROR: Headers in %s did not match the expected Mint transaction file headers." % filename)

# Sort transactions by date
transactions = sorted(transactions, key=lambda x: datetime.strptime(x[0], "%m/%d/%Y"))

with open(args.ledger_file, 'w') as ledger_file:    
    for t in transactions:
        date = datetime.strptime(t[0], "%m/%d/%Y").strftime("%Y/%m/%d")
        description = t[1]
        from_account = re.sub(' +', ' ', t[6])  # ledger hates double spaces
        balance = cashflow = t[3]
        if t[4] == 'debit': 
            balance = "-%s" % balance
        else: 
            cashflow = "-%s" % cashflow
        category = t[5]

        print(dedent("""\
            %s * %s
                Assets:%s  $ %s
                %s  $ %s
        """ % (date, description, from_account, balance, cat_dict[category], cashflow)), file=ledger_file)
